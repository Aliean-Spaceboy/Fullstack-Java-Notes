Type2 JDBC Driver Architecture / Native API Driver (Partly java driver)
=======================================================================
Type2 JDBC driver is not designed to interact with database software directly.

It will take the support of Vendor DB library to locate and interact with database software.

Diagram: jdbc4.1

Advantages:

> Type2 JDBC driver will not take the support of ODBC Driver.

> This driver will give better performance when compare to Type1 JDBC driver.

Disadvantages:

> This driver performance is quit slow. It is not suitable for medium and large scale projects.
   Hence it is not a industry standard driver.

> Since vendor db library present at client side so it is not suitable for untruted applets to 
  database communication.

> To work with Type2 JDBC driver we need to arrange vendor db library.


Type4 JDBC Driver Architecture / Native Protocol (Java driver) (thin driver)
============================================================================
Type4 JDBC driver is not designed to take the support of ODBC driver and vendor db library.

It is designed to interact with database software directly.

Diagram: jdbc4.2

Advantages:

> This driver will give better performance when compare to Type1 and Type2 driver.

> It is suitable for medium and large scale projects.Hence it is a industry standard driver.

> It is completely developed in java so it will give platform independency.

> Since ODBC driver and Vendor DB library not present at client side so it is suitable to perform 
  untrusted applets to database communication.

Disadvantages:

> It is a not built in driver of JDK.

> For every database software we need to arrange Type2 JDBC driver seperately.


JDBC Connection pooling
=======================
It is a factory containing a set of readily available JDBC Connection objects before actual begin used.

JDBC Connection pool represent connectivity with same database software.

Diagram: jdbc4.3


Advantages:

> It gives reusable JDBC Connection object.

> With minimum number of JDBC Connection objects we can interact with multiple clients.

> A user is not responsible to create, maintain and destroy JDBC Connection objects. A JDBC Connection
  pool is responsible.



Type3 JDBC Driver Architecture / Net API  (java driver)
=======================================================
A webserver or proxy server or IDE's server containing set of JDBC Connection objects in 
JDBC Connection pool.

Type3 JDBC driver is not designed to interact with database software directly.

IT is designed to interact with web server or proxy server or IDE's server to get one reusable 
JDBC Connection object from JDBC Connection pool.

Diagram: jdbc4.4

With respect to the diagram:


1) Web server or proxy server intracts with database software and gets some reusable JDBC Connection
   objects in JDBC Connection pool.

2) Our application interacts with Webserver or proxy server using Type3 driver and gets one 
   reusable JDBC Connection object.

3) Our application uses JDBC Connection object to create other JDBC Connection objects.

4) Once if we call con.close(), a  JDBC Connection goes back to JDBC Connection pool.

Q) Types of Connection objects in JDBC?

We have two types of JDBC Connection objects.

1) Direct JDBC Connection object 
------------------------------
	A JDBC Connection object which is created by the user.
	ex:
		Class.forName("driver-class");
		Connection con=DriverManager.getConnection("driver-url","username","password");

2) Pooled JDBC Connection object 
---------------------------
	A JDBC Connection object which is gathered from JDBC Connection pool.



Types of Statement objects in JDBC
===================================
We have three Statement objects in JDBC.

1) Simple Statement 
--------------------
It is an object of underlying supplied java class which implements java.sql.Statement interface.

2) PreparedStatement 
-------------------
It is an object of underlying supplied java class which implements java.sql.PreparedStatement interface.

3) CallableStatement 
---------------------
It is an object of underlying supplied java class which implements java.sql.CallableStatement interface.


SQL Injection problem
======================
Along with input values if we pass special SQL instructions which change the behaviour of a query 
and behaviour of an application is called SQL Injection problem.

Here special SQL instructions means comment in SQL i.e --.

ex:
	username : raja'--  
	password : hyd

	Valid Credentials 

While dealing with simple Statement object there is a chance of having SQL injection problem.

To overcome this limitation we need to use PreparedStatement object.


userlist table
---------------
drop table userlist;
create table userlist(uname varchar2(10),pwd varchar2(10));
insert into userlist values('raja','rani');
insert into userlist values('king','kingdom');
commit;


package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class SQLInjectProb 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the username :");
		String name=sc.next();
		
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		//converting string inputs according to SQL query
		name="'"+name+"'";
		pass="'"+pass+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry="select count(*) from userlist where uname="+name+" and pwd="+pass;
		
		ResultSet rs=st.executeQuery(qry);
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		
		if(result==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
		
		rs.close();
		st.close();
		con.close();
		
	}
}


Limitations with Simple Statement object
=========================================
1) It is not suitable to execute same query for multiple times with same or different values.

2) It raises SQL Injection problem.

3) We can't use string values directly to query parameter without any conversion.

4) Framing query with variables is quit complex.

5) It does not allow us to insert date values to database table column.

6) It does not allow us to insert LOB values to database table column.

To overcome these limitations we need to use PreparedStatement object.


Pre-compiled SQL Query
======================
Our SQL query goes to database software without inputs and becomes parsed query either it is 
executed or not is called precompiled SQL query.

PreparedStatement object deals with pre compiled SQL query.



Working with PreparedStatement object
=====================================
step1:
------
	Create a query with placeholders or parameters.
	ex:
		String qry="insert into student values(?,?,?)";

step2:
-----
	Convert SQL query to pre compiled SQL Query.
	ex:
		PreparedStatement ps=con.prepareStatement(qry);

step3:
----
	Set the values to query parameters.
	ex:
		set.setInt(1,no);
		set.setString(2,name);
		set.setString(3,add);

step4:
-----
	Execute pre compiled SQL query.
	ex:
		ps.executeUpdate();


step5:
-----
	Close PreparedStatement object.
	ex:
		ps.close();	
	


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no:");
		int no=sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		System.out.println("Enter the student address :");
		String add=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		
		String qry="insert into student values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		ps.setString(2, name);
		ps.setString(3, add);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record inserted");
		
		ps.close();
		con.close();
	}
}

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSUpdateApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no:");
		int no=sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="update student set sname=? where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1, name);
		ps.setInt(2, no);
		
		//execute
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Updated");
		else
			System.out.println("Record updated");
		
		ps.close();
		con.close();
		
	}
}


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSDeleteApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no:");
		int no=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="delete from student where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println("Record Deleted");
		
		ps.close();
		con.close();
		
	}
}



























































































































