form.html
----------

<form action="test" method="GET">
	
	Name: <input type="text" name="t1"/> <br>
	
	Age: <input type="text" name="t2"/> <br>
	
	<input type="submit" value="vote"/>	

</form>


web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 	<servlet>
		<servlet-name>VoteSrv</servlet-name> 
		<servlet-class>com.ihub.www.VoteSrv</servlet-class>	
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>VoteSrv</servlet-name>
 		<url-pattern>/test</url-pattern>
 	</servlet-mapping>
 	
 	<welcome-file-list>
 		<welcome-file>form.html</welcome-file>
 	</welcome-file-list>

</web-app>


VoteSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		
		//convert string age to int age 
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1 style='color:red'>"+name+" U r not eligible to vote </h1> </center>");
		else
			pw.println("<center> <h1 style='color:green'>"+name+" U r eligible to vote </h1> </center>");
		
		pw.close();
	}
}

Request url
-----------
	http://localhost:2525/VoteApp/




Servlet to Database Communication
==================================
Diagram: servlet4.1

Deployment Directory structure
-------------------------------
DBApp
|
|----Java Resource
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---DBSrv.java
|
|----WebContent
	|
	|-----form.html
	|
	|-----WEB-INF
		|
		|------web.xml 
		|
		|------lib
			|
			|---ojdbc14.jar
Note:
-----
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.

Copy and paste "ojdbc14.jar" file inside "WEB-INF/lib" folder seperately.


student table
------------
drop table student;
create table student(sno number(3),sname varchar2(10),sadd varchar2(12));
insert into student values(101,'raja','hyd');
insert into student values(102,'ravi','delhi');
insert into student values(103,'ramana','vizag');
commit;


form.html
----------

<form action="test" method="GET">
	
	No: <input type="text" name="t1"/> <br>
	
	Name: <input type="text" name="t2"/> <br>
	
	Address: <input type="text" name="t3"/> <br>
	
	<input type="submit" value="submit"/>

</form>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 	<servlet>
 		<servlet-name>DBSrv</servlet-name>
 		<servlet-class>com.ihub.www.DBSrv</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>DBSrv</servlet-name>
 		<url-pattern>/test</url-pattern>
 	</servlet-mapping>
 	
 	<welcome-file-list>
 		<welcome-file>form.html</welcome-file>
 	</welcome-file-list>
 
</web-app>

DBSrv.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DBSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String sno=req.getParameter("t1");
		int no=Integer.parseInt(sno);
		String name=req.getParameter("t2");
		String add=req.getParameter("t3");
		
		//insert the data into database 
		Connection con=null;
		PreparedStatement ps=null;
		int result=0;
		String qry=null;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			qry="insert into student values(?,?,?)";
			ps=con.prepareStatement(qry);
			
			//set the values
			ps.setInt(1, no);
			ps.setString(2, name);
			ps.setString(3,add);
			
			//execute 
			result=ps.executeUpdate();
			
			if(result==0)
				pw.println("<center><h1>No Record Inserted</h1></center>");
			else
				pw.println("<center><h1>Record Inserted </h1></center>");
			
			ps.close();
			con.close();
			
		}
		catch(Exception e)
		{
			pw.println(e);
		}
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/DBApp/



Q) What is the difference between GET methodology and POST methodology?

GET						POST
-------------					-----------
It is a default methodology.			It is not a default methodology.

It carries limited amount of data.		It carries unlimited amount of data.

It sends the request fastly.			It sends the request bit slow.

It is not suitable for secure data.		It is suitable for secure data.

It is not suitable for encryption and		It is suitable for encryption and file uploading. 
file uploading.

To process GET methodology we will use 		To process POST methodology we will use doPost(-,-)
doGet(-,-) method.				method.



Servlet Filter
==============
Filter is an object which is executed at the time of preprocessing and postprocessing of the request.

Diagram: servlet4.1

Filter is used to perform following task.

1) To count number of request coming to the application

2) To perform validation 

3) To perform encryption and descryption.

and etc.

Like Servlet, Filter having it's own Filter API.

Filter API contains following three interfaces.

1) Filter

2) FilterConfig 

3) FilterChain 

1)Filter Interface
================
For creating any filter, we must and should implements the Filter interface.

Filter interface provides the following 3 life cycle methods for filter.


i)public void init(FilterConfig config)
----------------------------------
	
	IT is used to initialize the filter.
	It invokes only once .


ii)public void doFilter(HttpServletRequest req,HttpServletResponse res,FilterChain chain)
----------------------------------------------------------
	This method is invoked every time when user request to any resources to which
	the filter is mappend.

	IT is used to perform filtering task.	
	
iii)public void destroy()
---------------------------
	This method is invoked only once when filter is taken out of the service.


2)FilterChain
==============
It is responsible to invoke the next filter or resource in the chain.

FilterChain contains only one method.

i)public void doFilter(HttpServletRequest req,HttpServletResponse res)
------------------------------------
	It passes the control to the next filter or resource.

	
3)FilterConfig
===============
For every filter our servlet container creates FilterConfig object.
It is one per filter.




Deployment Directory structure
-------------------------------
FilterApp
|
|----Java Resource
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---MyServlet.java
			|---MyFilter.java
|
|----WebContent
	|
	|-----index.html
	|
	|-----WEB-INF
		|
		|------web.xml 
Note:
-----
In above application we need to add "servlet-api.jar"  file in project build path.

index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 	
 	<servlet>
 		<servlet-name>MyServlet</servlet-name>
 		<servlet-class>com.ihub.www.MyServlet</servlet-class> 
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>MyServlet</servlet-name>
 		<url-pattern>/test</url-pattern>
 	</servlet-mapping>
 	
 	<filter>
 		<filter-name>MyFilter</filter-name>
 		<filter-class>com.ihub.www.MyFilter</filter-class> 
 	</filter>
 	<filter-mapping>
 		<filter-name>MyFilter</filter-name>
 		<url-pattern>/test</url-pattern>
 	</filter-mapping>
 	
 	<welcome-file-list>
 		<welcome-file>index.html</welcome-file>
 	</welcome-file-list>
 
</web-app>

MyFilter.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class MyFilter implements Filter
{

	public void init(FilterConfig config)throws ServletException 
	{
		
	}

	public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Filter Invoked Before</h1></center><br>");
		
		chain.doFilter(req, res);
		
		pw.println("<center><h1>Filter Invoked After</h1></center><br>");
		
	}
	public void destroy()
	{
		
	}
}

MyServlet.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Servlet Executed </h1></center><br>");

	}
}

Request url
----------
	http://localhost:2525/FilterApp/



































































































