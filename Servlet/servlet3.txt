Types of url patterns
=======================
Url pattern will hide technology name or class name from outsiders for security reason.

Our server, client and other web resource programs will recognize servlet program by using url pattern only.

Every server is designed to support three types of url patterns.

1) Exact Match url pattern 

2) Directory Match url pattern 

3) Extension Match url pattern 


1) Exact Match url pattern
----------------------------
It starts with '/' symbol and followed by a name.

ex:

web.xml 
-------
	<url-pattern>/test</url-pattern>

Request url
----------
	http://localhost:2525/DateApp/test 	(valid)
	http://localhost:2525/DateApp/best	(invalid)
	http://localhost:2525/DateApp/x/test	(invalid)	


2) Directory Match url pattern 
-----------------------------
It starts with '/' symbol and ends with '*'.

ex:

web.xml 
-------
	<url-pattern>/x/y/*</url-pattern>

Request url
----------
	http://localhost:2525/DateApp/x/y/z		(valid)
	http://localhost:2525/DateApp/x/y/z/test	(valid)
	http://localhost:2525/DateApp/y/x/z		(invalid)

3) Extension Match url pattern
---------------------------------
It starts with '*' symbol having some extension.

ex:

web.xml 
-------
	<url-pattern>*.do</url-pattern>

Request url
----------
	http://localhost:2525/DateApp/test.do		(valid)
	http://localhost:2525/DateApp/x/y/z.do		(valid)
	http://localhost:2525/DateApp/x/y/z		(invalid)

MIME Type
===========
MIME stands for Multipurpose Internet Mail Extension.

MIME describes in which format we want to display the output in servlet.

1) text/html 
-----------
	It will display the output in html format.

2) text/xml 
---------
	It will display the output in xml format.

3) application/ms-word
----------------------
	It will display the output in word format.


4) application/vnd.ms-excel 
-----------------------
	It will display the output in excel format.


Deployment Directory Structure
------------------------------
MIMEApp
|
|---Java Resources
|	|
	|-----src
		|
		|---com.ihub.www
			|
			|---TestSrv1.java
			|---TestSrv2.java
			|---TestSrv3.java
			|---TestSrv4.java
|---WebContent
	|
	|----WEB-INF
		|
		|---web.xml 
Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

TestSrv1.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class TestSrv1 extends GenericServlet
{
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<table border='1'>");
		pw.println("<tr><th>SNO</th><th>SNAME</th><th>SADD</th></tr>");
		pw.println("<tr><td>101</td><td>Alan</td><td>Hyd</td></tr>");
		pw.println("<tr><td>102</td><td>Jose</td><td>Delhi</td></tr>");
		pw.println("<tr><td>103</td><td>Mark</td><td>Vizag</td></tr>");
		pw.println("</table>");
		
		pw.close();
	}
}

TestSrv2.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class TestSrv2 extends GenericServlet
{
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/xml");
		
		pw.println("<table border='1'>");
		pw.println("<tr><th>SNO</th><th>SNAME</th><th>SADD</th></tr>");
		pw.println("<tr><td>101</td><td>Alan</td><td>Hyd</td></tr>");
		pw.println("<tr><td>102</td><td>Jose</td><td>Delhi</td></tr>");
		pw.println("<tr><td>103</td><td>Mark</td><td>Vizag</td></tr>");
		pw.println("</table>");
		
		pw.close();
	}
}

TestSrv3.java
---------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class TestSrv3 extends GenericServlet
{
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("application/ms-word");
		
		pw.println("<table border='1'>");
		pw.println("<tr><th>SNO</th><th>SNAME</th><th>SADD</th></tr>");
		pw.println("<tr><td>101</td><td>Alan</td><td>Hyd</td></tr>");
		pw.println("<tr><td>102</td><td>Jose</td><td>Delhi</td></tr>");
		pw.println("<tr><td>103</td><td>Mark</td><td>Vizag</td></tr>");
		pw.println("</table>");
		
		pw.close();
	}
}

TestSrv4.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class TestSrv4 extends GenericServlet
{
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("application/vnd.ms-excel");
		
		pw.println("<table border='1'>");
		pw.println("<tr><th>SNO</th><th>SNAME</th><th>SADD</th></tr>");
		pw.println("<tr><td>101</td><td>Alan</td><td>Hyd</td></tr>");
		pw.println("<tr><td>102</td><td>Jose</td><td>Delhi</td></tr>");
		pw.println("<tr><td>103</td><td>Mark</td><td>Vizag</td></tr>");
		pw.println("</table>");
		
		pw.close();
	}
}

Note:
-----
If a web application contains multiple servers then each servlet program we need to configure in web.xml file by using multiple <servlet> and <servlet-mapping> tags.

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 	<servlet>
 		<servlet-name>TestSrv1</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv1</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv1</servlet-name>
 		<url-pattern>/html</url-pattern>
 	</servlet-mapping>
 	
 	<servlet>
 		<servlet-name>TestSrv2</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv2</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv2</servlet-name>
 		<url-pattern>/xml</url-pattern>
 	</servlet-mapping>
 	
 	<servlet>
 		<servlet-name>TestSrv3</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv3</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv3</servlet-name>
 		<url-pattern>/word</url-pattern>
 	</servlet-mapping>
 	
 	<servlet>
 		<servlet-name>TestSrv4</servlet-name>
 		<servlet-class>com.ihub.www.TestSrv4</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>TestSrv4</servlet-name>
 		<url-pattern>/excel</url-pattern>
 	</servlet-mapping>

</web-app>


Request url
-----------
	http://localhost:2525/MIMEApp/html
	http://localhost:2525/MIMEApp/xml
	http://localhost:2525/MIMEApp/word
	http://localhost:2525/MIMEApp/excel


Types of communication
=====================
We can communicate to servlet program in three ways.

1) Browser to servlet communication 

2) HTML To servlet communication 

3) Servlet to Servlet communication 


In browser to servlet communication we need to type our request url in browser address bar.

But typing request url in browser address bar is quit complex.

To overcome this limitation we need to HTML to servlet communication.

In html to servlet communication we can give the request to servlet program by using HTML based hyperlinks and form pages.

The request which is generated by using hyperlink  does not carry the data.

But the request which is generated by using form page will carry the data.

In html based hyperlink to servlet communication we need to keep our request url as href url.
ex:
	<a href="http://localhost:2525/DateApp/test"> click Here </a>


In html based form page to servlet communication we need to keep our request url as action url.

ex:
	<form action="http://localhost:2525/DateApp/test">
		-
		-
	</form>	


Example application on HTML based Hyperlink to Servlet communication
===================================================================
Diagram: servlet3.1

Deployment Directory Structure
-------------------------------
WishApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|---WishSrv.java
	
|---WebContent
	|
	|----index.html
	|
	|----WEB-INF
		|
		|---web.xml 
Note:
---
In above application we need to add "servlet-api.jar" file in project build path.

Note:
----
It is never recommanded to extends a class with GenericServlet class because it won't give HTTP protocol features.

It is always recommanded to extends a class with HttpServlet class because it will give HTTP protocol features.

index.html
----------
<center>
	<h1>
		<a href="test"> Msg </a>
	</h1>
</center>


web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">

	<servlet>
		<servlet-name>WishSrv</servlet-name>
		<servlet-class>com.ihub.www.WishSrv</servlet-class>
	</servlet>  
	<servlet-mapping>
		<servlet-name>WishSrv</servlet-name>
		<url-pattern>/test</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

</web-app>


WishSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WishSrv extends HttpServlet
{
	public void service(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		Calendar c=Calendar.getInstance();
		int h=c.get(Calendar.HOUR_OF_DAY);
		
		if(h<12)
			pw.println("<center><h1>Good Morning </h1></center>");
		else if(h<16)
			pw.println("<center><h1>Good Afternoon </h1></center>");
		else if(h<20)
			pw.println("<center><h1>Good Evening </h1></center>");
		else
			pw.println("<center><h1>Good Night </h1></center>");
		
		pw.close();
	}
}



Request url
--------
	http://localhost:2525/WishApp





Example Application on HTML based form page to servlet communication
=========================================================================
Diagram: servlet3.2

Deployment Directory Structure
-----------------------------
VoteApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---VoteSrv.java
|
|---WebContent
	|
	|---form.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


We can send the request to servlet program in two methodologies.

1) GET methodology 
------------------
	It will carry limited amount of data.

2) POST methodology 
-------------------
	It will carry unlimited amount of data.

While extending with HttpServlet class , it is never recommanded to use service(-,-) method because it is not designed according to HTTP protocol.

IT is always recommanded to use doXxx(-,-) methods because they have designed according to HTTP protocol.

We have seven doXxx(-,-) methods.

ex:
	doGet(-,-)
	doPost(-,-)
	doPut(-,-)
	doDelete(-,-)
	doOption(-,-)
	doTrace(-,-)
	doHead(-,-)


prototype of doXxx(-,-)
----------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws 					ServletException,IOException
{

}


































































































