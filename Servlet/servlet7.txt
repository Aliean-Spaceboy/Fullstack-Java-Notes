Deployment Directory Structure
------------------------------
STSApp2
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---WebContent
	|
	|------index.html
	|
	|------WEB-INF
		|
		|----web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
-----------
<center>
	<h1>
			<a href="test?t1=flights"> Flights </a>
			
			<br>
			
			<a href="test?t1=hotels"> Hotels </a>
			
			<br>
			
			<a href="test?t1=railways"> Trains </a>
	
	</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">

	<servlet>
		<servlet-name>TestSrv</servlet-name>
		<servlet-class>com.ihub.www.TestSrv</servlet-class>
	</servlet> 
	<servlet-mapping>
		<servlet-name>TestSrv</servlet-name>
		<url-pattern>/test</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

</web-app>


TestSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading the data from request
		String value=req.getParameter("t1");
		
		res.sendRedirect("http://www.makemytrip.com/"+value);

		pw.close();
	}
}

Request url
----------
	http://localhost:2525/STSApp2/	


Q) How to enable <load-on-startup> and what happends if we enable <load-on-startup> ? 

We can enable <load-on-startup> in web.xml file.

ex:
	<web-app>

		<servlet>
			<servlet-name>TestSrv</servlet-name>
			<servlet-class>com.ihub.www.TestSrv</servlet-class>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>TestSrv</servlet-name>
			<url-pattern>/test</url-pattern>
		</servlet-mapping>
		
	</web-app>

If we enable <load-on-startup> then our servlet container will create servlet object during the server startup or during the deployment of web application.

In short , our servlet container will create servlet object before we give the request.


Stateless Behaviour of web application
=======================================

Diagram: servlet7.1

Above application demostrate on stateless behaviour of web application.

In stateless bahaviour of web application, we can't access previous request data while processing the current request.


Deployment Directory structure
------------------------------
StatelessApp
|
|---Java Resources
	|
	|-------src
		|
		|---TestSrv1.java
		|---TestSrv2.java
|---WebContent
	|
	|------form.html
	|
	|------WEB-INF
		|
		|---web.ml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<form action="test1">

	Name: <input type="text" name="t1"/> <br>
	
	Father Name : <input type="text" name="t2"/> <br>
	
	Maritial Status : <input type="checkbox" name="t3" value="married"/> MARRIED
					  <input type="checkbox" name="t3" value="single"/> SINGLE  <br>
					  
	<input type="submit" value="submit"/> 

</form>


web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 <servlet>
 	<servlet-name>TestSrv1</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv1</servlet-class> 
 	<load-on-startup>1</load-on-startup>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv1</servlet-name>
 	<url-pattern>/test1</url-pattern>
 </servlet-mapping>
 
 <servlet>
 	<servlet-name>TestSrv2</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv2</servlet-class>
 	<load-on-startup>2</load-on-startup>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv2</servlet-name>
 	<url-pattern>/test2</url-pattern>
 </servlet-mapping>
 
 <welcome-file-list>
 	<welcome-file>form.html</welcome-file>
 </welcome-file-list>
 
</web-app>

TestSrv1.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv1 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String fname=req.getParameter("t2");
		String ms=req.getParameter("t3");
		
		if(ms.equals("married"))
		{
			pw.println("<form action='test2'>");
			pw.println("Spouse Name : <input type='text' name='f2t1'/> <br>");
			pw.println("No of Child : <input type='text' name='f2t2'/> <br>");
			pw.println("<input type='submit' value='submit'/>");
			pw.println("</form>");
		}
		else
		{
			pw.println("<form action='test2'>");
			pw.println("When will u marry : <input type='text' name='f2t1'/> <br>");
			pw.println("Why will u marry : <input type='text' name='f2t2'/> <br>");
			pw.println("<input type='submit' value='submit'/>");
			pw.println("</form>");
		}
		
		pw.close();
		
	}
}

TestSrv2.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv2 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form1 data 
		String name=req.getParameter("t1");
		String fname=req.getParameter("t2");
		String ms=req.getParameter("t3");
		
		//reading form2 data 
		String val1=req.getParameter("f2t1");
		String val2=req.getParameter("f2t2");
		
		pw.println("Form 1 Data : "+name+" "+fname+" "+ms+"<br>");
		pw.println("Form 2 Data : "+val1+" "+val2+"<br>");
		
		pw.close();
		
	}
}

Request url
--------
	http://localhost:2525/StatelessApp/


Session
==========
The process of continue and related operations performed on the web applications with multiple request and response is called session.
ex:
	sign in to gmail and logout from gmail is one session.
	starting of java class and ending of java class is one session.

In stateless web application, no web resource program can access previous request data while processing the current request during a session.

To overcome this limitation we need to use session tracking.


Session Tracking / Session Management
=====================================
Session tracking is used to make our web application as statefull web application even through our HTTP protocol is stateless.

In stateless web application , no web resource program can access previous request data while processing the current request during a session.

In statefull web applicaiton, all web resource programs can access previous request data while 
processing the current request during a session.

There are four techniques to perform session tracking in servlets.

1) Using hidden box fields 

2) HttpCookies 

3) HttpSession with Cookies 

4) URL Rewriting 


HttpSession with Cookies
==========================
In HttpSession with cookies, for every request it will create a unique session id.

Our web container uses that session id to identify a user is a new user or existing user.

HttpSession object we can use to perform following task.

1)Bind the objects

2)To manipuate the data in HttpSession object.

Diagram:servlet7.2



Deployment Directory structure
------------------------------
SessionApp
|
|---Java Resources
	|
	|-------src
		|
		|---TestSrv1.java
		|---TestSrv2.java
|---WebContent
	|
	|------form.html
	|
	|------WEB-INF
		|
		|---web.ml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<form action="test1">

	Name: <input type="text" name="t1"/> <br>
	
	Father Name : <input type="text" name="t2"/> <br>
	
	Maritial Status : <input type="checkbox" name="t3" value="married"/> MARRIED
					  <input type="checkbox" name="t3" value="single"/> SINGLE  <br>
					  
	<input type="submit" value="submit"/> 

</form>


web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
 
 <servlet>
 	<servlet-name>TestSrv1</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv1</servlet-class> 
 	<load-on-startup>1</load-on-startup>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv1</servlet-name>
 	<url-pattern>/test1</url-pattern>
 </servlet-mapping>
 
 <servlet>
 	<servlet-name>TestSrv2</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv2</servlet-class>
 	<load-on-startup>2</load-on-startup>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv2</servlet-name>
 	<url-pattern>/test2</url-pattern>
 </servlet-mapping>
 
 <welcome-file-list>
 	<welcome-file>form.html</welcome-file>
 </welcome-file-list>
 
</web-app>


TestSrv1.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class TestSrv1 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String fname=req.getParameter("t2");
		String ms=req.getParameter("t3");
		
		//store the data in HttpSession
		HttpSession session=req.getSession(true);
		session.setAttribute("pname", name);
		session.setAttribute("pfname", fname);
		session.setAttribute("pms", ms);
		
		
		if(ms.equals("married"))
		{
			pw.println("<form action='test2'>");
			pw.println("Spouse Name : <input type='text' name='f2t1'/> <br>");
			pw.println("No of Child : <input type='text' name='f2t2'/> <br>");
			pw.println("<input type='submit' value='submit'/>");
			pw.println("</form>");
		}
		else
		{
			pw.println("<form action='test2'>");
			pw.println("When will u marry : <input type='text' name='f2t1'/> <br>");
			pw.println("Why will u marry : <input type='text' name='f2t2'/> <br>");
			pw.println("<input type='submit' value='submit'/>");
			pw.println("</form>");
		}
		
		pw.close();
		
	}
}

TestSrv2.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class TestSrv2 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form1 data from HttpSession
		HttpSession session=req.getSession(false);
		String name=(String)session.getAttribute("pname");
		String fname=(String)session.getAttribute("pfname");
		String ms=(String)session.getAttribute("pms");
		
		//reading form2 data 
		String val1=req.getParameter("f2t1");
		String val2=req.getParameter("f2t2");
		
		pw.println("Form 1 Data : "+name+" "+fname+" "+ms+"<br>");
		pw.println("Form 2 Data : "+val1+" "+val2+"<br>");
		
		pw.close();
		
	}
}

Request url
-----------
	http://localhost:2525/SessionApp/


Q) How many scopes are there servlet?

We have three scopes in servlet.

1) Request scope (default scope)
	ex:
		HttpServletRequest 

2) Session scope 
	ex:
		HttpSession 

3) Application scope 
	ex:
		ServletContext



Assignment
==========
Q) Write a java program to decode the string?

input:
	AAJF

output:
	1106





















 







































































































